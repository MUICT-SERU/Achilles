import { useRef, useState, useEffect } from 'react';
import { Box, Link, Grid, Typography } from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';

import ArrowForwardRoundedIcon from '@material-ui/icons/ArrowForwardRounded';

import VulnerabilityGraph from './VulnerabilityGraph';

import splitDependency from 'utils/splitDependency';

const useStyles = makeStyles((theme) => ({
  middleColumnContent: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    height: '100%',
  },
}));

const ItemDetail: React.FC<{
  item: IItem;
}> = ({ item }) => {
  const classes = useStyles();
  const { depVersion: currentUsageVersion } = splitDependency(
    item.package.name
  );

  const [graphWidth, setGraphWidth] = useState(500);
  const graphSpaceRef = useRef<any>();

  const updateGraphWidth = () => {
    const { width } = graphSpaceRef.current.getBoundingClientRect();
    setGraphWidth(width < 530 ? width : 530);
  };

  useEffect(() => {
    window.addEventListener('resize', updateGraphWidth);
    return () => window.removeEventListener('resize', updateGraphWidth);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  useEffect(() => {
    updateGraphWidth();
  }, []);

  return (
    <>
      <Grid container spacing={1}>
        <Grid item sm={6} xs={6}>
          <Box my={1}>
            <Typography variant="body1">Current Usage Version:</Typography>
          </Box>
        </Grid>
        <Grid item sm={6} xs={6}>
          <Box my={1} className={classes.middleColumnContent}>
            <Typography variant="body1">{currentUsageVersion}</Typography>
          </Box>
        </Grid>
        <Grid item sm={6} xs={6}>
          <Typography variant="body1">Vulnerable Version:</Typography>
          <Box mb={1} />
        </Grid>
        <Grid item sm={6} xs={6}>
          <Box className={classes.middleColumnContent}>
            <Typography variant="body1">
              {item.vulnerableVersionRange}
            </Typography>
          </Box>
        </Grid>
        <Grid item sm={6} xs={6}>
          <Typography variant="body1">Patch Version:</Typography>
          <Box mb={1} />
        </Grid>
        <Grid item sm={6} xs={6}>
          <Typography variant="body1">
            {item.firstPatchedVersion
              ? item.firstPatchedVersion.identifier
              : 'Currently, no patch version'}
          </Typography>
        </Grid>
        <Grid item sm={6} xs={12}>
          <Box className={classes.middleColumnContent}>
            <Typography variant="body1">Vulnerability Chaining:</Typography>
          </Box>
        </Grid>
        <Grid item sm={6} xs={12} ref={graphSpaceRef}>
          <Box mb={2}>
            <VulnerabilityGraph
              {...{
                chainings: item.chaining,
                severity: item.severity,
                graphWidth,
                vulnerabilityPackage: item.package.name,
              }}
            />
          </Box>
        </Grid>
        <Grid item sm={6} xs={6}>
          <Typography variant="body1">
            Vulnerabilities and Advisory link:{' '}
          </Typography>
        </Grid>
        <Grid item sm={6} xs={6}>
          {item.advisory?.identifiers?.map(
            (identifier: IIdentifier, index: number) => {
              return (
                <Box mb={1} key={index}>
                  <Typography variant="body1">
                    <Link
                      href={`${
                        identifier.type === 'GHSA'
                          ? 'https://github.com/advisories/'
                          : 'https://nvd.nist.gov/vuln/detail/'
                      }${identifier.value}`}
                      color="inherit"
                      target="_blank"
                      variant="body1"
                      underline="always"
                    >
                      {identifier.value}
                    </Link>
                  </Typography>
                </Box>
              );
            }
          )}
        </Grid>
        {item.cwes && item.cwes.length > 0 && (
          <Grid item sm={6} xs={6}>
            <Typography variant="body1">CWEs:</Typography>
          </Grid>
        )}
        {item.cwes && item.cwes.length > 0 && (
          <Grid item sm={6} xs={6}>
            {item.cwes.map((cwe, key) => {
              return (
                <Box mb={1} key={key}>
                  <Link
                    href={cwe.link}
                    color="inherit"
                    target="_blank"
                    variant="body1"
                    underline="always"
                  >
                    {cwe.cweId}: {cwe.name}
                  </Link>
                </Box>
              );
            })}
          </Grid>
        )}
        <Grid item sm={6} xs={6}>
          <Typography variant="body1">Dependency to be updated:</Typography>
          <Box mb={1} />
        </Grid>
        <Grid item sm={6} xs={6}>
          <Box
            className={classes.middleColumnContent}
            style={{ wordWrap: 'break-word' }}
          >
            <Typography variant="body1">
              {item.direct_dependency.name}
            </Typography>
          </Box>
        </Grid>
        <Grid item sm={6} xs={6}>
          <Typography variant="body1" component="div">
            Update{' '}
            <Box fontWeight="fontWeightBold" display="inline">
              {item.direct_dependency.name}
            </Box>{' '}
            to latest version:
          </Typography>
        </Grid>
        <Grid item sm={6} xs={6}>
          <Box className={classes.middleColumnContent}>
            <Grid container>
              <Typography variant="body1">
                {item.direct_dependency.current_version}
              </Typography>
              {<ArrowForwardRoundedIcon />}
              <Typography variant="body1">
                {item.direct_dependency.latest_version}
              </Typography>
            </Grid>
          </Box>
        </Grid>
      </Grid>
    </>
  );
};

export default ItemDetail;
