import { useState } from 'react';
import {
  Box,
  Grid,
  Paper,
  Select,
  Divider,
  Typography,
  InputLabel,
  FormControl,
} from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';

import { severityColor } from 'utils/severityColor';
import splitDependency from 'utils/splitDependency';

import ItemDetail from './ItemDetail';

const useStyles = makeStyles((theme) => ({
  paperContainer: {
    boxShadow: '0px 1px 5px 0px rgba(169,169,169,0.5)',
    padding: theme.spacing(2, 2),
    borderRadius: theme.spacing(2),
  },
  formControl: {
    margin: theme.spacing(1),
    minWidth: 120,
  },
  dropDownIcon: {
    fill: '#65c8d0',
  },
  divider: {
    marginTop: theme.spacing(3),
    marginBottom: theme.spacing(1),
    height: 2,
  },
  middleColumnContent: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    height: '100%',
  },
}));

const Vulnerability: React.FC<{
  items: IItem[];
  isDownload: boolean;
  sortValue: any;
  setSortValue: any;
}> = ({ items, isDownload, sortValue, setSortValue }) => {
  const classes = useStyles();
  const [packages, setPackages] = useState<IItem[]>(items);

  const handleSortValue = (event: any) => {
    const value = event.target.value;
    const packagesTemp = packages;
    const priorities = ['CRITICAL', 'HIGH', 'MODERATE', 'LOW'];

    if (value && value === 'Critical - Low') {
      packagesTemp.sort((a, b) => {
        const firstPrio = priorities.indexOf(a.severity);
        const secondPrio = priorities.indexOf(b.severity);
        return firstPrio - secondPrio;
      });
    } else if (value && value === 'Low - Critical') {
      packagesTemp.sort((a, b) => {
        const firstPrio = priorities.indexOf(b.severity);
        const secondPrio = priorities.indexOf(a.severity);
        return firstPrio - secondPrio;
      });
    }

    setPackages(packagesTemp);
    setSortValue(value);
  };

  const findDepName = (dep: string) => {
    const { depName } = splitDependency(dep);
    return depName;
  };

  return (
    <>
      <Paper elevation={0} className={classes.paperContainer}>
        <Box
          display="flex"
          flexDirection="row"
          alignItems="center"
          justifyContent="space-between"
          mb={1}
        >
          <Typography variant="h5">
            {packages?.length > 1 ? 'Vulnerabilities' : 'Vulnerability'}
          </Typography>
          {isDownload ? (
            sortValue && (
              <Typography variant="h6">Sort By: {sortValue}</Typography>
            )
          ) : (
            <FormControl
              variant="outlined"
              className={classes.formControl}
              size="small"
            >
              <InputLabel htmlFor="sort-by">Sort By</InputLabel>
              <Select
                native
                value={sortValue}
                onChange={handleSortValue}
                label="sort-by"
                inputProps={{
                  name: 'sort',
                  id: 'sort-by',
                  classes: {
                    icon: classes.dropDownIcon,
                  },
                }}
              >
                <option aria-label="None" value="" />
                <option value="Critical - Low">Critical - Low</option>
                <option value="Low - Critical">Low - Critical</option>
              </Select>
            </FormControl>
          )}
        </Box>
        <Divider style={{ height: 2 }} />
        <Box mt={2} mb={1} px={2}>
          {packages?.map((item: IItem, index: number) => {
            return (
              <Box key={index}>
                {/* Item detail brief description*/}
                <Grid container spacing={1} alignItems="center">
                  <Grid item sm={6} xs={6}>
                    <Typography variant="body1">
                      Potentially Vulnerable:
                    </Typography>
                  </Grid>
                  <Grid item sm={6} xs={6}>
                    <Typography variant="h6" style={{ wordWrap: 'break-word' }}>
                      {findDepName(item.package.name)}
                    </Typography>
                  </Grid>
                  <Grid item sm={6} xs={6}>
                    <Typography variant="body1">Severity:</Typography>
                  </Grid>
                  <Grid item sm={6} xs={6}>
                    <Typography
                      variant="h6"
                      style={{ color: severityColor(item.severity) }}
                    >
                      {item.severity.toLowerCase()}
                    </Typography>
                  </Grid>
                </Grid>

                {/* Item detail */}
                <ItemDetail {...{ item }} />

                {index < packages?.length - 1 && (
                  <Divider variant="middle" className={classes.divider} />
                )}
              </Box>
            );
          })}
        </Box>
      </Paper>
    </>
  );
};

export default Vulnerability;
